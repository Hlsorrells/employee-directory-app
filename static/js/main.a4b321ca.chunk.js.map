{"version":3,"sources":["components/Header/Header.js","components/EmployeeListItem/EmployeeListItem.js","components/Search/Search.js","components/EmployeeList/EmployeeList.js","App.js","serviceWorker.js","index.js"],"names":["styles","jumbotron","textAlign","background","Header","className","style","EmployeeListItem","employee","src","image","alt","id","value","name","title","first","last","email","phone","Search","employees","filterList","InputGroup","onChange","e","query","filtered","filter","person","toLowerCase","includes","handleChange","target","FormControl","placeholder","aria-label","aria-describedby","Append","Button","variant","EmployeeList","useState","employeeList","setEmployeeList","Table","responsive","striped","bordered","hover","scope","onClick","sort","a","b","length","map","index","key","picture","thumbnail","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAEMA,G,MAAS,CACbC,UAAW,CACTC,UAAW,SACXC,WAAY,aAaDC,EATA,WACb,OACE,yBAAKC,UAAU,YAAYC,MAAON,EAAOC,WACvC,wDACA,+C,gCCCSM,EAZU,SAAAC,GACrB,OACI,4BACI,4BAAI,yBAAKC,IAAKD,EAASE,MAAOC,IAAI,cAClC,4BAAKH,EAASI,GAAGC,OACjB,4BAAKL,EAASM,KAAKC,MAAnB,IAA2BP,EAASM,KAAKE,MAAzC,IAAiDR,EAASM,KAAKG,MAC/D,4BAAKT,EAASU,OACd,4BAAKV,EAASW,S,eCoBXC,EAxBA,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAUzB,OACI,kBAACC,EAAA,EAAD,CAAYlB,UAAU,OAAOmB,SAAU,SAACC,GAAD,OAVtB,SAACC,GAClB,IAAMC,EAAWN,EAAUO,QAAO,SAAAC,GAE9B,MADU,UAAMA,EAAOf,KAAKC,MAAlB,YAA2Bc,EAAOf,KAAKE,MAAvC,YAAgDa,EAAOf,KAAKG,MAC1Da,cAAcC,SAASL,EAAMI,kBAG7CR,EAAWK,GAImCK,CAAaP,EAAEQ,OAAOpB,SAChE,kBAACqB,EAAA,EAAD,CACIC,YAAY,gBACZC,aAAW,gBACXC,mBAAiB,iBAErB,kBAACd,EAAA,EAAWe,OAAZ,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,qBAAhB,a,OC0BDC,EA1CM,WAAO,IAAD,EACiBC,mBAASrB,GAD1B,mBAChBsB,EADgB,KACFC,EADE,KAQvB,OACI,6BACI,kBAAC,EAAD,CACIvB,UAAWA,EACXC,WAAYsB,IAEhB,kBAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACpC,+BACI,4BACI,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OACN,kBAACX,EAAA,EAAD,CAAQC,QAAQ,OAAO5B,GAAG,KAAKuC,QAAS,SAAC1B,GAAoBA,EAAEQ,OAAOrB,GAd1FgC,GADe,kBAAM,YAAID,GAAcS,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEzC,GAAGC,MAAUyC,EAAE1C,GAAGC,MAAS,GAAK,UAerE,QAEJ,wBAAIqC,MAAM,OAAV,iBACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAGR,+BACMP,EAAaY,OAAS,EAAKZ,EAAaa,KAAI,SAAChD,EAAUiD,GAAX,OAC1C,kBAAC,EAAD,CACIC,IAAKD,EACL7C,GAAIJ,EAASI,GACbE,KAAMN,EAASM,KACfJ,MAAOF,EAASmD,QAAQC,UACxB1C,MAAOV,EAASU,MAChBC,MAAOX,EAASW,WAEnB,+CC5BV0C,EAVH,WAEV,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a4b321ca.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n  jumbotron: {\n    textAlign: \"center\",\n    background: \"#7E57C2\"\n  }\n}\n\nconst Header = () => {\n  return (\n    <div className=\"jumbotron\" style={styles.jumbotron}>\n      <h1>ACME IT Consulting, Inc.</h1>\n      <h3>Employee List</h3>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\r\n\r\nconst EmployeeListItem = employee => {\r\n    return (\r\n        <tr>\r\n            <td><img src={employee.image} alt=\"employee\"/></td>\r\n            <td>{employee.id.value}</td>\r\n            <td>{employee.name.title} {employee.name.first} {employee.name.last}</td>\r\n            <td>{employee.email}</td>\r\n            <td>{employee.phone}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EmployeeListItem;","import React from \"react\";\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Search = ({ employees, filterList }) => {\r\n    const handleChange = (query) => {\r\n        const filtered = employees.filter(person => {\r\n            const name = `${person.name.title} ${person.name.first} ${person.name.last}`;\r\n            return name.toLowerCase().includes(query.toLowerCase());\r\n        });\r\n\r\n        filterList(filtered)\r\n    }\r\n\r\n    return (\r\n        <InputGroup className=\"mb-3\" onChange={(e) => handleChange(e.target.value)}>\r\n            <FormControl\r\n                placeholder=\"Employee Name\"\r\n                aria-label=\"Employee Name\"\r\n                aria-describedby=\"basic-addon2\"\r\n            />\r\n            <InputGroup.Append>\r\n                <Button variant=\"outline-secondary\">Search</Button>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, { useState } from 'react';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport EmployeeListItem from '../EmployeeListItem/EmployeeListItem';\r\nimport Search from '../Search/Search';\r\nimport employees from '../../lib/employees.json';\r\n\r\n\r\nconst EmployeeList = () => {\r\n    const [employeeList, setEmployeeList] = useState(employees);\r\n\r\n    const handleClick = () => {\r\n        const sorted = () => [...employeeList].sort((a, b) => (a.id.value) > (b.id.value) ? 1 : -1);\r\n        setEmployeeList(sorted);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Search\r\n                employees={employees}\r\n                filterList={setEmployeeList}\r\n            />\r\n            <Table responsive striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Photo</th>\r\n                        <th scope=\"col\">\r\n                            <Button variant=\"link\" id=\"id\" onClick={(e) => { handleClick(e.target.id) }}>ID#</Button>\r\n                        </th>\r\n                        <th scope=\"col\">Employee Name</th>\r\n                        <th scope=\"col\">Email</th>\r\n                        <th scope=\"col\">Phone</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {(employeeList.length > 0) ? employeeList.map((employee, index) => (\r\n                        <EmployeeListItem\r\n                            key={index}\r\n                            id={employee.id}\r\n                            name={employee.name}\r\n                            image={employee.picture.thumbnail}\r\n                            email={employee.email}\r\n                            phone={employee.phone}\r\n                        />\r\n                    )) : <p>No employees</p>}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\nexport default EmployeeList;","import React from 'react';\nimport Header from './components/Header/Header';\nimport EmployeeList from './components/EmployeeList/EmployeeList';\n\n\nconst App = () => {\n\n  return (\n    <div >\n      <Header />\n      <EmployeeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}